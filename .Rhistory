check_rhub()
devtools::release()
spell_check()
load_all()
document()
devtools::build()
spell_check()
devtools::release()
check_win_devel()
devtools::release()
library(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
load_all()
library(optimr)
library("optimr")
install.packages("optimr")
library(dplyr)
library(devtools)
load_all()
document()
check()
devtools::build()
devtools::check_built()
devtools::spell_check()
devtools::release_checks()
devtools::release()
devtools::check_win_devel()
curl::curl_fetch_memory(url, handle = h)
devtools::check_win_devel()
?survey::as.svrepdesign
library(devtools)
load_all()
document()
check()
devtools::build()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
library(devtools)
check()
devtools::check_win_devel()
library(devtools)
load_all()
devtools::check_win_devel()
devtools::build()
devtools::load_all()
document()
devtools::build()
devtools::release()
devtools::release()
library(devtools)
load_all
load_all()
document()
check()
devtools::spell_check()
load_all()
document()
check()
load_all()
document()
check()
devtools::spell_check()
devtools::release()
devtools::build()
devtools::release()
?logisticPCA::fitted.lpca
?BiplotML::J.BipLog.BIN
?BiplotML::cv_LogBip
load_all()
library(devtools)
load_all()
document()
load_all()
document()
cv_MM <- cv_LogBip(data = x$X, k=0:5, method = "MM", maxit = 1000)
x <- simBin(n = 100, p = 50, k = 3, D = 0.5, C = 20)
cv_MM <- cv_LogBip(data = x$X, k=0:5, method = "MM", maxit = 1000)
load_all()
document()
data("Methylation")
set.seed(02052020)
load_all()
document()
data("Methylation")
LB <- LogBip(Methylation, plot = FALSE)
Theta <- fitted_LB(LB, type = "link")
Sys.time(LB <- LogBip(Methylation, plot = FALSE))
Sys.time()
inicio <- Sys.time()
fin <- Sys.time()
fin - inicio
inicio <- Sys.time()
LB <- LogBip(Methylation, plot = FALSE)
fin <- Sys.time()
fin - inicio
data("Methylation")
set.seed(123456)
out<- LogBip(x = Methylation, sup = TRUE, plot=FALSE)
outBLB <- bootBLB(x = Methylation, sup = TRUE, plot=FALSE)
plotBLB(x = outBLB, titles = "Methylation Logistic Biplot", ellipses = FALSE)
plotBLB(x = outBLB, titles = "Methylation LogBiplot", endsegm = 0.95)
plotBLB(x = outBLB, label.ind = TRUE, titles = "Methylation LogBiplot")
data("Methylation")
LB <- LogBip(Methylation, plot = FALSE)
out <- pred_LB(LB, Methylation)
out
out <- sdv_MM(x = Methylation)
plotBLB(out)
out
out <- sdv_MM(x = Methylation)
out$iterations
load_all()
document()
check()
data("Methylation")
res <- LogBip(x = Methylation, method = "MM", maxit = 1000)
res <- LogBip(x = Methylation, plot = FALSE)
res <- LogBip(x = Methylation, plot = FALSE, method = "CG", type = 1)
res <- LogBip(x = Methylation, type = 2)
res <- LogBip(x = Methylation, method = "CG", type = 2)
res <- LogBip(x = Methylation, plot = FALSE, method = "CG", type = 1)
load_all()
plotBLB <- function(x, dim=c(1, 2), col.ind = NULL, col.var="#00AFBB",
label.ind = FALSE, draw = c("biplot","ind","var"), titles = NULL,
ellipses = FALSE, endsegm = 0.75, repel = TRUE){
EspA <- x$Ahat
EspB <- x$Bhat
k <- ncol(EspA)
grap <- match.arg(draw[1], c("ind","var","biplot"))
#######.... Markers row
EspB$x.50 = (-EspB$bb0*EspB$bb1) / rowSums(EspB[,c("bb1", "bb2")]*EspB[,c("bb1", "bb2")])
EspB$y.50 = (-EspB$bb0*EspB$bb2) / rowSums(EspB[,c("bb1", "bb2")]*EspB[,c("bb1", "bb2")])
EspB$x.75 = (log(endsegm/(1-endsegm))-EspB$bb0)*EspB$bb1 / rowSums(EspB[,c("bb1", "bb2")]*EspB[,c("bb1", "bb2")])
EspB$y.75 = (log(endsegm/(1-endsegm))-EspB$bb0)*EspB$bb2 / rowSums(EspB[,c("bb1", "bb2")]*EspB[,c("bb1", "bb2")])
colnames(EspA) <- c(paste0("Dim", seq(1,k,1)))
if (!requireNamespace("tidyr", quietly = TRUE)) {
stop("Package \"tidyr\" needed for this function to work. Please install it.",
call. = FALSE)
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("Package \"dplyr\" needed for this function to work. Please install it.",
call. = FALSE)
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("Package \"ggplot2\" needed for this function to work. Please install it.",
call. = FALSE)
}
if (!requireNamespace("ggrepel", quietly = TRUE)) {
stop("Package \"ggrepel\" needed for this function to work. Please install it.",
call. = FALSE)
}
if(ellipses){
min.plot <- floor(min(min(x$Ellip$Dimb1), min(x$Ellip$Dimb2)))
max.plot <- ceiling(max(max(x$Ellip$Dimb1), max(x$Ellip$Dimb2)))
}else{
min.plot <- floor(min(min(EspA$Dim1), min(EspA$Dim2)))
max.plot <- ceiling(max(max(EspA$Dim1), max(EspA$Dim2)))
}
if(x$method == "CG") subt <- "Estimation with Conjugate Gradient"
if(x$method != "CG") subt <- paste0("Estimation with ", x$method, " algorithm")
if(grap=="ind"){
if (is.null(titles)) titulo <- "Individuals plot"
if (!is.null(titles)) titulo <- titles
if(is.null(col.ind)){
g <- ggplot2::ggplot() +
ggplot2::geom_point(data=EspA, ggplot2::aes(x=Dim1, y=Dim2), color='#E7B800', size = 2, shape=17)+
ggplot2::geom_vline(xintercept = 0, color = "black", linetype = 2) +
ggplot2::geom_hline(yintercept = 0, color = "black", linetype = 2)  +
ggplot2::xlab("Dimension 1") + ggplot2::ylab("Dimension 2") +
ggplot2::xlim(min.plot, max.plot) + ggplot2::ylim(min.plot, max.plot) +
ggplot2::scale_color_brewer(palette="Set1") +
ggplot2::theme_bw() +
ggplot2::theme(axis.text = ggplot2::element_text(face = "bold"), legend.position = "none") +
ggplot2::labs(title = titulo,
subtitle = subt,
caption = Sys.Date()) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),
plot.subtitle =  ggplot2::element_text(hjust = 0.5))
}else{
g <-  ggplot2::ggplot() +
ggplot2::geom_point(data=EspA, ggplot2::aes(x=Dim1, y=Dim2, colour=col.ind), size = 2, shape=17)+
ggplot2::geom_vline(xintercept = 0, color = "black", linetype = 2) +
ggplot2::geom_hline(yintercept = 0, color = "black", linetype = 2)  +
ggplot2::xlab("Dimension 1") + ggplot2::ylab("Dimension 2") +
ggplot2::xlim(min.plot, max.plot) + ggplot2::ylim(min.plot, max.plot) +
ggplot2::scale_color_brewer(palette="Set1") +
ggplot2::theme_bw() +
ggplot2::theme(axis.text = ggplot2::element_text(face = "bold")) +
ggplot2::labs(title = titulo,
subtitle = subt,
caption = Sys.Date()) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),
plot.subtitle =  ggplot2::element_text(hjust = 0.5))
}
if(label.ind){
if(repel){
g <- g +
ggrepel::geom_text_repel(data=EspA, ggplot2::aes(x=Dim1, y=Dim2, label = rownames(EspA)), size=3.5, segment.color = "grey50")
}else{
g <- g +
ggplot2::geom_text(data=EspA, ggplot2::aes(x=Dim1, y=Dim2, label = rownames(EspA)), size=3.5, segment.color = "grey50")
}
}
}
min.plot2 <- floor(min(min(EspB$x.50), min(EspB$x.75), min(EspB$y.50), min(EspB$y.75)))
max.plot2 <- ceiling(max(max(EspB$x.50), max(EspB$x.75), max(EspB$y.50), max(EspB$y.75)))
limit2 <- max(abs(min.plot2), abs(max.plot2))
if(grap == "var"){
if (is.null(titles)) titulo <- "Variables plot"
if (!is.null(titles)) titulo <- titles
g <- ggplot2::ggplot() +
ggplot2::geom_segment(data=EspB, ggplot2::aes(x=x.50, y=y.50, xend=x.75, yend=y.75), arrow=grid::arrow(angle=20,type="closed",ends="last", length=grid::unit(0.3,"cm")), colour = col.var, show.legend=FALSE) +
ggrepel::geom_text_repel(data=EspB, ggplot2::aes(x=x.75, y=y.75, label = rownames(EspB),
angle = (180/pi) * atan(y.75/x.75), hjust = (1 - 2 * sign(x.75))/ 2),
size=3, segment.color = "grey50", vjust=0) +
ggplot2::xlab("Dimension 1") + ggplot2::ylab("Dimension 2") +
ggplot2::xlim(min.plot2, max.plot2) + ggplot2::ylim(min.plot2, max.plot2) +
ggplot2::geom_vline(xintercept = 0, color = "black", linetype = 2) +
ggplot2::geom_hline(yintercept = 0, color = "black", linetype = 2)  +
ggplot2::theme_bw() +
ggplot2::theme(axis.text = ggplot2::element_text(face = "bold"),
legend.position = "none") +
ggplot2::labs(title = titulo,
subtitle = subt,
caption = Sys.Date()) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),
plot.subtitle =  ggplot2::element_text(hjust = 0.5))
}
min.plot3 <-  min(min.plot, min.plot2)
max.plot3 <-  max(max.plot, max.plot2)
limit3 <- max(abs(min.plot3), abs(max.plot3))
if(grap == "biplot"){
if (is.null(titles)) titulo <- "Logistic Biplot"
if (!is.null(titles)) titulo <- titles
if(is.null(col.ind)){
g <- ggplot2::ggplot() +
ggplot2::geom_point(data=EspA, ggplot2::aes(x=Dim1, y=Dim2), color='#E7B800', size = 2, shape=17)+
ggplot2::geom_segment(data=EspB, ggplot2::aes(x=x.50, y=y.50, xend=x.75, yend=y.75), arrow=grid::arrow(angle=20,type="closed",ends="last", length=grid::unit(0.3,"cm")), colour = col.var, show.legend=FALSE) +
ggrepel::geom_text_repel(data=EspB, ggplot2::aes(x=x.75, y=y.75, label = rownames(EspB),
angle = (180/pi) * atan(y.75/x.75), hjust = (1 - 2 * sign(x.75))/ 2),
size=3, segment.color = "grey50", vjust=0) +
ggplot2::geom_vline(xintercept = 0, color = "black", linetype = 2) +
ggplot2::geom_hline(yintercept = 0, color = "black", linetype = 2) +
ggplot2::xlab("Dimension 1") + ggplot2::ylab("Dimension 2") +
ggplot2::xlim(min.plot3, max.plot3) + ggplot2::ylim(min.plot3, max.plot3) +
ggplot2::scale_color_brewer(palette="Set1") +
ggplot2::theme_bw() +
ggplot2::theme(axis.text = ggplot2::element_text(face = "bold"),
legend.position = "none") +
ggplot2::labs(title = titulo,
subtitle = subt,
caption = Sys.Date()) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),
plot.subtitle =  ggplot2::element_text(hjust = 0.5)) +
ggplot2::coord_fixed()
}else{
g <- ggplot2::ggplot() +
ggplot2::geom_point(data=EspA, ggplot2::aes(x=Dim1, y=Dim2, colour=col.ind), size = 2, shape=17)+
ggplot2::geom_segment(data=EspB, ggplot2::aes(x=x.50, y=y.50, xend=x.75, yend=y.75), arrow=grid::arrow(angle=20,type="closed",ends="last", length=grid::unit(0.3,"cm")), colour = col.var, show.legend=FALSE) +
ggrepel::geom_text_repel(data=EspB, ggplot2::aes(x=x.75, y=y.75, label = rownames(EspB),
angle = (180/pi) * atan(y.75/x.75), hjust = (1 - 2 * sign(x.75))/ 2),
size=3, segment.color = "grey50", vjust=0) +
ggplot2::geom_vline(xintercept = 0, color = "black", linetype = 2) +
ggplot2::geom_hline(yintercept = 0, color = "black", linetype = 2) +
ggplot2::xlab("Dimension 1") + ggplot2::ylab("Dimension 2") +
ggplot2::xlim(min.plot3, max.plot3) + ggplot2::ylim(min.plot3, max.plot3) +
ggplot2::scale_color_brewer(palette="Set1") +
ggplot2::theme_bw() +
ggplot2::theme(axis.text = ggplot2::element_text(face = "bold")) +
ggplot2::labs(title = titulo,
subtitle = subt,
caption = Sys.Date()) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),
plot.subtitle =  ggplot2::element_text(hjust = 0.5))+
ggplot2::coord_fixed()
}
if(label.ind){
g <- g +
ggrepel::geom_text_repel(data=EspA, ggplot2::aes(x=Dim1, y=Dim2, label = rownames(EspA)), size=3.5, segment.color = "grey50")
}
}
if(ellipses){
g <- g +
ggplot2::geom_point(data=x$Ellip, ggplot2::aes(x=Dimb1, y=Dimb2, group=ind), size=0.001, colour="lightgray", shape=20)
}
return(g)
}
load_all()
rm(list=ls())
load_all()
data("Methylation")
res <- LogBip(x = Methylation, method = "MM", maxit = 1000)
load_all()
res <- LogBip(x = Methylation, method = "MM", maxit = 1000)
set.seed(1234)
x <- simBin(n = 100, p = 50, k = 3, D = 0.5, C = 20)
cv_MM <- cv_LogBip(data = x$X, k=0:5, method = "MM", maxit = 1000)
load_all()
document()
check()
load_all()
document()
check()
rm(list = ls())
data("Methylation")
load_all()
res <- LogBip(x = Methylation, plot = FALSE, method = "CG", type = 1)
check()
?LogBip
?LogBip
load_all()
check()
load_all()
document()
check()
?LogBi
?LogBip
load_all()
document()
devtools::spell_check()
devtools::build()
devtools::check_win_devel()
devtools::release()
thresholds <- function(x, P, ncuts = 100){
if (!requireNamespace("tidyr", quietly = TRUE)) {
stop("Package \"tidyr\" needed for this function to work. Please install it.",
call. = FALSE)
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("Package \"dplyr\" needed for this function to work. Please install it.",
call. = FALSE)
}
P <- as.matrix(P)
if(is.null(colnames(x))) colnames(x) <- paste0('V', 1:ncol(x))
N1 <- ceiling(sum(x, na.rm = T))
N0 <- length(as.matrix(x)) - N1 - sum(is.na(x))
TE <- lapply(seq(0, 1, length.out = ncuts), function(z){
Pr <- ifelse(P>=z, 1, 0)
c1 <- 1 - apply((Pr == 1) & (x == 1), 2, sum, na.rm=TRUE)/apply(x == 1, 2, sum, na.rm = T)
c2 <- 1 - apply((Pr == 0) & (x == 0), 2, sum, na.rm=TRUE)/apply(x == 0, 2, sum, na.rm = T)
TE <- 100/2 * (c1 + c2)
lista <- list(TE)
})
TEp <-  data.frame(dplyr::bind_rows(TE), threshold = seq(0, 1, length.out = ncuts))
thresholds <- TEp |>
tidyr::pivot_longer(-threshold, names_to = "variable", values_to = "BACC") |>
dplyr::group_by(variable) |>
dplyr::mutate(merror = min(BACC)) |>
dplyr::filter(BACC == merror) |>
dplyr::mutate(row = dplyr::row_number()) |>
dplyr::filter(row == 1) |> dplyr::ungroup() |>
dplyr::select(variable, threshold, BACC)
thresholds <- thresholds[match(colnames(x), thresholds$variable),]
Pr <- matrix(NA, nrow(P), ncol(P))
for(p in 1:ncol(P)){
Pr[,p] <- ifelse( P[,p] >= thresholds$threshold[p], 1, 0)
}
c1 <- 1 - sum(apply((Pr == 1) & (x == 1), 2, sum, na.rm=TRUE))/N1
c2 <- 1 - sum(apply((Pr == 0) & (x == 0), 2, sum, na.rm=TRUE))/N0
BACC <- round(100/2 * (c1 + c2), 2)
out <- list(pred = Pr, thres = thresholds, BACC = BACC)
}
load_all()
library(devtools)
load_all()
check()
load_all()
set.seed(1234)
x <- simBin(n = 100, p = 50, k = 3, D = 0.5, C = 20)
cv_MM <- cv_LogBip(data = x$X, k=0:5, method = "MM", maxit = 1000)
cv_CG <- cv_LogBip(data = x$X, k=0:5, method = "CG", type = 1)
cv_PB <- cv_LogBip(data = x$X, k=0:5, method = "PDLB", maxit = 1000)
data=x$X
k=0:5
method = "PDLB"
maxit = 1000
x <- as.matrix(data)
x
verify <- apply(x, 2, sd, na.rm=T)
any(verify == 0)
if(any(verify == 0)) {
stop("Some variables have zero variance, so the procedure cannot be applied.")
}
min <- min(k)
j <- k
min
j <- k
if(any(is.na(x)) & method != "PDLB"){
warning("Binary matrix contains missing values, the ", method, " method has been changed to PDLB method.")
method = "PDLB"
}
cvD <- matrix(NA, length(k), 3)
k=0
if(method == "CG" & k > 0){
bip <- BiplotML::LogBip(x, k = k, method = method, type = type, plot = FALSE)
thres <- BiplotML::pred_LB(bip, x, ncuts = 50)$thresholds
}else if(method == "BFGS" & k > 0){
bip <- BiplotML::LogBip(x, k = k, method = method, plot = FALSE)
thres <- BiplotML::pred_LB(bip, x, ncuts = 50)$thresholds
}else if(method == "MM" & k > 0){
if(!is.null(maxit)){
bip <- BiplotML::LogBip(x, k = k, method = "MM", maxit = maxit, plot = FALSE)
}else{
bip <- BiplotML::LogBip(x, k = k, method = "MM", plot = FALSE)
}
thres <- BiplotML::pred_LB(bip, x, ncuts = 50)$thresholds
}else if(method == "PDLB" & k > 0){
if(!is.null(maxit)){
bip <- BiplotML::LogBip(x, k = k, method = "PDLB", maxit = maxit, plot = FALSE)
xt <- bip$impute_x
}else{
bip <- BiplotML::LogBip(x, k = k, method = "PDLB", plot = FALSE)
xt <- bip$impute_x
}
thres <- BiplotML::pred_LB(bip, bip$impute_x, ncuts = 50)$thresholds
}else{
theta <- rep(1, nrow(x)) %*% t(as.matrix(colMeans(x, na.rm=TRUE)))
P <- plogis(theta)
thres <- thresholds(x = x, P = P, ncuts = 50)$thres
}
xt
if(k == 0 & any(is.na(x))){
m <- apply(x, 2, mean, na.rm = T)
xt <- ifelse(is.na(x) & m > 0.5, 1, 0)
}
any(!is.na(x))
if(k == 0 && any(!is.na(x)) && method == "PDLB") xt <- x
xt
load_all()
cv_PB <- cv_LogBip(data = x$X, k=0:5, method = "PDLB", maxit = 1000)
set.seed(1234)
x <- simBin(n = 100, p = 50, k = 3, D = 0.5, C = 20)
cv_PB <- cv_LogBip(data = x$X, k=0:5, method = "PDLB", maxit = 1000)
load_all()
set.seed(1234)
x <- simBin(n = 100, p = 50, k = 3, D = 0.5, C = 20)
cv_PB <- cv_LogBip(data = x$X, k=0:5, method = "PDLB", maxit = 1000)
load_all()
check()
load_all()
check()
load_all()
check()
load_all()
check()
data("Methylation")
set.seed(12345)
n <- nrow(Methylation)
p <- ncol(Methylation)
miss <- matrix(rbinom(n*p, 1, 0.2), n, p)
miss <- ifelse(miss == 1, NA, miss)
x <- Methylation + miss
out <- LogBip(x, method = "PDLB", maxit = 1000)
load_all()
check()
document()
check()
load_all()
document()
load_all()
document()
document()
document()
load_all()
document()
load_all()
library(devtools)
load_all()
document()
load_all()
document()
check()
install()
load_all()
library(devtools)
load_all()
document()
check()
install()
load_all()
library(devtools)
load_all()
document()
install()
load_all()
library(devtools)
load_all()
document()
check()
library(devtools)
load_all()
document()
check()
install.packages()
install()
R --version
data("Methylation")
set.seed(123456)
#' outBLB <- bootBLB(x = Methylation, sup = TRUE, plot=FALSE)
data("Methylation")
set.seed(123456)
outBLB <- bootBLB(x = Methylation, sup = TRUE, plot=FALSE)
load_all()
library(devtools)
load_all()
document()
data("Methylation")
library(VIM)
