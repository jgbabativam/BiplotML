theme(plot.title = element_text(hjust = 0.5), plot.subtitle =  element_text(hjust = 0.5))
}
min.plot2 <- floor(min(min(EspB$x.50), min(EspB$x.75), min(EspB$y.50), min(EspB$y.75)))
max.plot2 <- ceiling(max(max(EspB$x.50), max(EspB$x.75), max(EspB$y.50), max(EspB$y.75)))
limit2 <- max(abs(min.plot2), abs(max.plot2))
if(grap == "var"){
if (is.null(titles)) titulo <- "Variables plot"
if (!is.null(titles)) titulo <- titles
g <- ggplot() +
geom_segment(data=EspB, aes(x=x.50, y=y.50, xend=x.75, yend=y.75), arrow=arrow(angle=20,type="closed",ends="last", length=unit(0.3,"cm")), colour = col.var, show.legend=FALSE) +
geom_text_repel(data=EspB, aes(x=x.75, y=y.75, label = rownames(EspB),
angle = (180/pi) * atan(y.75/x.75), hjust = (1 - 2 * sign(x.75))/ 2),
size=3, segment.color = "grey50", vjust=0) +
xlab("Dimension 1") + ylab("Dimension 2") +
xlim(min.plot2, max.plot2) + ylim(min.plot2, max.plot2) +
geom_vline(xintercept = 0, color = "black", linetype = 2) +
geom_hline(yintercept = 0, color = "black", linetype = 2)  +
theme_bw() +
theme(axis.text = element_text(face = "bold"), legend.position = "none") +
labs(title = titulo,
subtitle = subt,
caption = Sys.Date()) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle =  element_text(hjust = 0.5))
}
min.plot3 <-  min(min.plot, min.plot2)
max.plot3 <-  max(max.plot, max.plot2)
limit3 <- max(abs(min.plot3), abs(max.plot3))
if(grap == "biplot"){
if (is.null(titles)) titulo <- "Bootstrap Binary Logistic Biplot"
if (!is.null(titles)) titulo <- titles
g <- ggplot() +
geom_point(data=EspA, aes(x=Dim1, y=Dim2), colour=col.ind, size = 2, shape=17)+
geom_segment(data=EspB, aes(x=x.50, y=y.50, xend=x.75, yend=y.75), arrow=arrow(angle=20,type="closed",ends="last", length=unit(0.3,"cm")), colour = col.var, show.legend=FALSE) +
geom_text_repel(data=EspB, aes(x=x.75, y=y.75, label = rownames(EspB),
angle = (180/pi) * atan(y.75/x.75), hjust = (1 - 2 * sign(x.75))/ 2),
size=3, segment.color = "grey50", vjust=0) +
geom_vline(xintercept = 0, color = "black", linetype = 2) +
geom_hline(yintercept = 0, color = "black", linetype = 2) +
xlab("Dimension 1") + ylab("Dimension 2") +
xlim(min.plot3, max.plot3) + ylim(min.plot3, max.plot3) +
theme_bw() +
theme(axis.text = element_text(face = "bold"), legend.position = "none") +
labs(title = titulo,
subtitle = subt,
caption = Sys.Date()) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle =  element_text(hjust = 0.5))
if(label.ind){
g <- g +
geom_text_repel(data=EspA, aes(x=Dim1, y=Dim2, label = rownames(EspA)), size=3.5, segment.color = "grey50")
}
}
if(ellipses){
g <- g +
geom_point(data=x$Ellip, aes(x=Dimb1, y=Dimb2, group=ind), size=0.001, colour="lightgray", shape=20)
}
return(g)
}
outBLB = bootBLB(x = Methylation, sup = TRUE, plot=FALSE)
plot.BLB(x=outBLB, titles = "Methylation Logistic Biplot")
plot.BLB(x = outBLB, titles = "Methylation Logistic Biplot", ellipses = TRUE, endsegm = 0.95)
plot.BLB(x = outBLB, label.ind = TRUE, titles = "Methylation Logistic Biplot", ellipses = TRUE, endsegm = 0.95)
outBLB$Ellip
outBLB$Ellip$Dimb1
plot.BLB <- function(x, dim=c(1, 2), col.ind = "#E7B800", col.var="#00AFBB",
label.ind = FALSE, draw = c("biplot","ind","var"), titles = NULL,
ellipses = FALSE, endsegm = 0.75){
EspA <- x$Ahat
EspB <- x$Bhat
k <- ncol(EspA)
grap <- match.arg(draw[1], c("ind","var","biplot"))
#######.... Markers row
EspB$x.50 = (-EspB$bb0*EspB$bb1) / rowSums(EspB[,c("bb1", "bb2")]*EspB[,c("bb1", "bb2")])
EspB$y.50 = (-EspB$bb0*EspB$bb2) / rowSums(EspB[,c("bb1", "bb2")]*EspB[,c("bb1", "bb2")])
EspB$x.75 = (log(endsegm/(1-endsegm))-EspB$bb0)*EspB$bb1 / rowSums(EspB[,c("bb1", "bb2")]*EspB[,c("bb1", "bb2")])
EspB$y.75 = (log(endsegm/(1-endsegm))-EspB$bb0)*EspB$bb2 / rowSums(EspB[,c("bb1", "bb2")]*EspB[,c("bb1", "bb2")])
colnames(EspA) <- c(paste0("Dim", seq(1,k,1)))
if(ellipses){
min.plot <- floor(min(min(x$Ellip$Dimb1), min(x$Ellip$Dimb2)))
max.plot <- ceiling(max(max(x$Ellip$Dimb1), max(x$Ellip$Dimb2)))
}else{
min.plot <- floor(min(min(EspA$Dim1), min(EspA$Dim2)))
max.plot <- ceiling(max(max(EspA$Dim1), max(EspA$Dim2)))
}
if(x$method == "CG") subt <- "Estimation with Conjugate Gradient"
if(x$method != "CG") subt <- paste0("Estimation with ", x$method, " algorithm")
if(grap=="ind"){
if (is.null(titles)) titulo <- "Individuals plot"
if (!is.null(titles)) titulo <- titles
g <-  ggplot() +
geom_point(data=EspA, aes(x=Dim1, y=Dim2), colour=col.ind, size = 2, shape=17)+
geom_vline(xintercept = 0, color = "black", linetype = 2) +
geom_hline(yintercept = 0, color = "black", linetype = 2)  +
xlab("Dimension 1") + ylab("Dimension 2") +
geom_text_repel(data=EspA, aes(x=Dim1, y=Dim2, label = rownames(EspA)), size=3.5, segment.color = "grey50") +
xlim(min.plot, max.plot) + ylim(-min.plot, max.plot) +
theme_bw() +
theme(axis.text = element_text(face = "bold"), legend.position = "none") +
labs(title = titulo,
subtitle = subt,
caption = Sys.Date()) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle =  element_text(hjust = 0.5))
}
min.plot2 <- floor(min(min(EspB$x.50), min(EspB$x.75), min(EspB$y.50), min(EspB$y.75)))
max.plot2 <- ceiling(max(max(EspB$x.50), max(EspB$x.75), max(EspB$y.50), max(EspB$y.75)))
limit2 <- max(abs(min.plot2), abs(max.plot2))
if(grap == "var"){
if (is.null(titles)) titulo <- "Variables plot"
if (!is.null(titles)) titulo <- titles
g <- ggplot() +
geom_segment(data=EspB, aes(x=x.50, y=y.50, xend=x.75, yend=y.75), arrow=arrow(angle=20,type="closed",ends="last", length=unit(0.3,"cm")), colour = col.var, show.legend=FALSE) +
geom_text_repel(data=EspB, aes(x=x.75, y=y.75, label = rownames(EspB),
angle = (180/pi) * atan(y.75/x.75), hjust = (1 - 2 * sign(x.75))/ 2),
size=3, segment.color = "grey50", vjust=0) +
xlab("Dimension 1") + ylab("Dimension 2") +
xlim(min.plot2, max.plot2) + ylim(min.plot2, max.plot2) +
geom_vline(xintercept = 0, color = "black", linetype = 2) +
geom_hline(yintercept = 0, color = "black", linetype = 2)  +
theme_bw() +
theme(axis.text = element_text(face = "bold"), legend.position = "none") +
labs(title = titulo,
subtitle = subt,
caption = Sys.Date()) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle =  element_text(hjust = 0.5))
}
min.plot3 <-  min(min.plot, min.plot2)
max.plot3 <-  max(max.plot, max.plot2)
limit3 <- max(abs(min.plot3), abs(max.plot3))
if(grap == "biplot"){
if (is.null(titles)) titulo <- "Bootstrap Binary Logistic Biplot"
if (!is.null(titles)) titulo <- titles
g <- ggplot() +
geom_point(data=EspA, aes(x=Dim1, y=Dim2), colour=col.ind, size = 2, shape=17)+
geom_segment(data=EspB, aes(x=x.50, y=y.50, xend=x.75, yend=y.75), arrow=arrow(angle=20,type="closed",ends="last", length=unit(0.3,"cm")), colour = col.var, show.legend=FALSE) +
geom_text_repel(data=EspB, aes(x=x.75, y=y.75, label = rownames(EspB),
angle = (180/pi) * atan(y.75/x.75), hjust = (1 - 2 * sign(x.75))/ 2),
size=3, segment.color = "grey50", vjust=0) +
geom_vline(xintercept = 0, color = "black", linetype = 2) +
geom_hline(yintercept = 0, color = "black", linetype = 2) +
xlab("Dimension 1") + ylab("Dimension 2") +
xlim(min.plot3, max.plot3) + ylim(min.plot3, max.plot3) +
theme_bw() +
theme(axis.text = element_text(face = "bold"), legend.position = "none") +
labs(title = titulo,
subtitle = subt,
caption = Sys.Date()) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle =  element_text(hjust = 0.5))
if(label.ind){
g <- g +
geom_text_repel(data=EspA, aes(x=Dim1, y=Dim2, label = rownames(EspA)), size=3.5, segment.color = "grey50")
}
}
if(ellipses){
g <- g +
geom_point(data=x$Ellip, aes(x=Dimb1, y=Dimb2, group=ind), size=0.001, colour="lightgray", shape=20)
}
return(g)
}
plot.BLB(x = outBLB, titles = "Methylation Logistic Biplot", ellipses = TRUE, endsegm = 0.95)
plot.BLB(x = outBLB, label.ind = TRUE, titles = "Methylation Logistic Biplot", ellipses = TRUE, endsegm = 0.95)
gradientDesc <- function(x, k = 2, rate, converg, max_iter) {
x = as.matrix(x)
n = nrow(x)
p = ncol(x)
aik = n * k
bjk = p * (k + 1)
dTheta = aik + bjk
par = runif(dTheta)
A = matrix(par[1:aik], n, k)
B = matrix(par[(aik + 1):dTheta], p, k + 1)
lin = cbind(rep(1, n), A) %*% t(B)
hX = exp(lin)/(1 + exp(lin))
J = -sum(x * log(hX) + (1 - x) * log(1 - hX), na.rm = TRUE)
MSE <- J/n
converged = F
iterations = 0
while (converged == F) {
A_new <- A - rate * (hX - x) %*% B[, -1]
B_new <- B - rate * t(hX - x) %*% cbind(rep(1, n), A)
lin_new = cbind(rep(1, n), A_new) %*% t(B_new)
hX_hat = exp(lin_new)/(1 + exp(lin_new))
J_new = -sum(x * log(hX_hat) + (1 - x) * log(1 - hX_hat), na.rm = TRUE)
MSE_new <- J_new/n
A <- A_new
B <- B_new
if (MSE - MSE_new <= converg) {
converged = T
A <- as.data.frame(A)
B <- as.data.frame(B)
colnames(B) = c(paste0("bb", seq(0,k,1)))
rownames(A) = rownames(x)
colnames(A) = c(paste0("Dim", seq(1,k,1)))
out = list(Ahat = A, Bhat = B, method="Gradient descent")
print(paste("The process converge with", iterations, "iterations"))
class(out) <- c("BiplotML", "list")
return(out)
}
iterations = iterations + 1
if (iterations > max_iter) {
converged = T
A <- as.data.frame(A)
B <- as.data.frame(B)
colnames(B) = c(paste0("bb", seq(0,k,1)))
rownames(A) = rownames(x)
colnames(A) = c(paste0("Dim", seq(1,k,1)))
out = list(Ahat = A, Bhat = B, method="Gradient descent")
print(paste("The process not converge with", max_iter, "iterations"))
class(out) <- c("BiplotML", "list")
return(out)
}
}
}
devtools::document()
?gradientDesc
data('Methylation')
performanceBLB(x = Methylation)
View(Methylation)
performanceBLB(xi = Methylation)
performanceBLB(xi = Methylation, maxit = 150)
performanceBLB(xi = Methylation, maxit = 300)
performanceBLB(xi = Methylation, maxit = 800)
set.seed(123456)
performanceBLB(xi = Methylation)
xi = Methylation
n = nrow(xi)
p = ncol(xi)
aik = n * k
bjk = p * (k + 1)
dTheta = aik + bjk
method = 2
method0 <- c("CG", "Rvmmin")
res <- optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0, itnmax = maxit)
method0 <- c("CG", "Rcgmin", "Rvmmin")
res <- optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0, itnmax = maxit)
J.BipLog.BIN <- function(xt, par, k, lambda) {
#---- Para iniciar.
x = as.matrix(xt)
n = nrow(x)
p = ncol(x)
aik = n * k
bjk = p * (k + 1)
dTheta = aik + bjk
#--Matrices de parámetros.
A = matrix(par[1:aik], n, k)
B = matrix(par[(aik + 1):dTheta], p, k + 1)
#--- Parte lineal.
lin = cbind(rep(1, n), A) %*% t(B)
#--- Hipotesis.
hX = exp(lin)/(1 + exp(lin))
#---- Minimizar:
J = -sum(x * log(hX) + (1 - x) * log(1 - hX), na.rm = TRUE) + lambda *
sum(A^2, na.rm = TRUE)/2 + lambda * sum(B[, -1]^2, na.rm = TRUE)/2
return(J)
}
Grad.BipLog.BIN <- function(xt, par, k, lambda) {
#---- Para iniciar.
x = as.matrix(xt)
n = nrow(x)
p = ncol(x)
aik = n * k
bjk = p * (k + 1)
dTheta = aik + bjk
#--Matrices de parámetros.
A = matrix(par[1:aik], n, k)
B = matrix(par[(aik + 1):dTheta], p, k + 1)
#--- Parte lineal.
lin = cbind(rep(1, n), A) %*% t(B)
#--- Hipotesis.
hX = exp(lin)/(1 + exp(lin))
dA = (hX - x) %*% B[, -1] + lambda * A
dB = t(hX - x) %*% cbind(rep(1, n), A) + lambda * cbind(rep(0, p), B[,
-1])  ## Lleno de ceros para conformar con la cte de A.
gradient = c(c(dA), c(dB))
return(gradient)
}
# xs: suplementary rows B: estimated B
Indsup.BIN <- function(xs, B, par, k, lambda) {
#---- Para iniciar.
x = as.matrix(xs)
n = nrow(x)
p = ncol(x)
aik = n * k
dTheta = aik
#--Matriz de parámetros.
A = matrix(par[1:aik], n, k)
Bs = as.matrix(B)
#--- Parte lineal.
lin = cbind(rep(1, n), A) %*% t(Bs)
#--- Hipotesis.
hX = exp(lin)/(1 + exp(lin))
#---- Minimizar:
L = -sum(x * log(hX) + (1 - x) * log(1 - hX), na.rm = TRUE) + lambda *
sum(A^2, na.rm = TRUE)/2 + lambda * sum(Bs[, -1]^2, na.rm = TRUE)/2
return(L)
}
Indsup.GradBIN <- function(xs, B, par, k, lambda) {
#---- Para iniciar.
x = as.matrix(xs)
Bs = as.matrix(B)
n = nrow(x)
p = ncol(x)
aik = n * k
dTheta = aik
#--Matriz de parámetros.
A = matrix(par[1:aik], n, k)
#--- Parte lineal.
lin = cbind(rep(1, n), A) %*% t(Bs)
#--- Hipotesis.
hX = exp(lin)/(1 + exp(lin))
dA = (hX - x) %*% Bs[, -1] + lambda * A
gradient = c(dA)
return(gradient)
}
method0 <- c("CG", "Rcgmin", "Rvmmin")
res <- optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0, itnmax = maxit)
warnings()
n = nrow(xi)
n
p = ncol(xi)
p
aik = n * k
aik
k = 2
L = 0
method = NULL
maxit = NULL
n = nrow(xi)
p = ncol(xi)
n
p
aik = n * k
aik
bjk = p * (k + 1)
bjk
dTheta = aik + bjk
dTheta
method = 2
method0 <- c("CG", "Rcgmin", "Rvmmin")
res <- optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0, itnmax = maxit)
res
res2 <-  Rcgmin(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L)
install.packages("Rcgmin")
install.packages("Rcgmin")
library(Rcgmin)
res2 <-  Rcgmin(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L)
res2
res <- optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0, itnmax = maxit)
devtools::document()
method0 <- c("CG", "Rcgmin", "Rvmmin")
res <- optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0, itnmax = maxit)
source('G:/Mi unidad/Packages/BiplotML/R/performanceBLB.R', echo=TRUE)
res
res$result = ifelse(res$convcode == 0, "convergence", ifelse(res$convcode ==
1, "max iterations", ifelse(res$convcode %in% c(10, 20, 21), "inadmissible",
ifelse(res$convcode == 9999, "method has failed", NA))))
res
out = data.frame(method = rownames(res), evaluat = res$value, convergence = res$result,
fevals = res$fevals, time = res$xtime)
out
method0 <- c("CG", "Rcgmin")
res <- optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0, itnmax = maxit)
performanceBLB(xi = Methylation)
performanceBLB <- function(xi, k = 2, L = 0, method = NULL, maxit = NULL) {
n = nrow(xi)
p = ncol(xi)
aik = n * k
bjk = p * (k + 1)
dTheta = aik + bjk
if (is.null(method))
method = 2
if (method == 1 & !is.null(maxit)) {
method0 = c("Nelder-Mead", "uobyqa", "newuoa")
res = optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0, itnmax = maxit)
}
if (method == 1 & is.null(maxit)) {
method0 = c("Nelder-Mead", "uobyqa", "newuoa")
res = optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0)
}
if (method == 2 & !is.null(maxit)) {
method0 <- c("CG", "Rcgmin")
res <- optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0, itnmax = maxit)
}
if (method == 2 & is.null(maxit)) {
method0 = c("CG", "Rcgmin", "Rvmmin")
res = optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0)
}
if (method == 3 & !is.null(maxit)) {
method0 = c("BFGS", "L-BFGS-B", "nlm", "nlminb")
res = optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0, itnmax = maxit)
}
if (method == 3 & is.null(maxit)) {
method0 = c("BFGS", "L-BFGS-B", "nlm", "nlminb")
res = optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0)
}
if (method == 4) {
method0 = c("Nelder-Mead", "CG", "BFGS", "nlm", "nlminb", "Rcgmin",
"Rvmmin", "uobyqa", "newuoa")
res = optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0)
}
res$result = ifelse(res$convcode == 0, "convergence", ifelse(res$convcode ==
1, "max iterations", ifelse(res$convcode %in% c(10, 20, 21), "inadmissible",
ifelse(res$convcode == 9999, "method has failed", NA))))
out = data.frame(method = rownames(res), evaluat = res$value, convergence = res$result,
fevals = res$fevals, time = res$xtime)
return(out)
}
performanceBLB <- function(xi, k = 2, L = 0, method = NULL, maxit = NULL) {
n = nrow(xi)
p = ncol(xi)
aik = n * k
bjk = p * (k + 1)
dTheta = aik + bjk
if (is.null(method))
method = 2
if (method == 1 & !is.null(maxit)) {
method0 = c("Nelder-Mead", "uobyqa", "newuoa")
res = optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0, itnmax = maxit)
}
if (method == 1 & is.null(maxit)) {
method0 = c("Nelder-Mead", "uobyqa", "newuoa")
res = optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0)
}
if (method == 2 & !is.null(maxit)) {
method0 <- c("CG", "Rcgmin")
res <- optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0, itnmax = maxit)
}
if (method == 2 & is.null(maxit)) {
method0 = c("CG", "Rcgmin")
res = optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0)
}
if (method == 3 & !is.null(maxit)) {
method0 = c("BFGS", "L-BFGS-B", "nlm", "nlminb")
res = optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0, itnmax = maxit)
}
if (method == 3 & is.null(maxit)) {
method0 = c("BFGS", "L-BFGS-B", "nlm", "nlminb")
res = optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0)
}
if (method == 4) {
method0 = c("Nelder-Mead", "CG", "BFGS", "nlm", "nlminb", "Rcgmin", "uobyqa", "newuoa")
res = optimx(par = runif(dTheta), fn = J.BipLog.BIN, gr = Grad.BipLog.BIN,
xt = xi, k = k, lambda = L, method = method0)
}
res$result = ifelse(res$convcode == 0, "convergence", ifelse(res$convcode ==
1, "max iterations", ifelse(res$convcode %in% c(10, 20, 21), "inadmissible",
ifelse(res$convcode == 9999, "method has failed", NA))))
out = data.frame(method = rownames(res), evaluat = res$value, convergence = res$result,
fevals = res$fevals, time = res$xtime)
return(out)
}
performanceBLB(xi = Methylation)
performanceBLB(xi = Methylation, maxit = 150)
performanceBLB(x = Methylation, method = 4)
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::use_testthat()
usethis::use_testthat()
usethis::use_test()
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
devtools::test()
devtools::document()
devtools::load_all()
usethis::use_testthat()
devtools::test()
?bibentry
inst/CITATION
usethis::use_citation()
devtools::document()
devtools::load_all()
usethis::create_package("G:/Mi unidad/Packages")
devtools::check()
data("Methylation")
set.seed(123456)
out.sup <- bootBLB(x = Methylation, ellipses = FALSE)
devtools::check()
devtools::check()
library(usethis)
edit_r_environ()
?use_github
edit_r_environ()
library(usethis)
edit_r_environ()
use_github(protocol = "https", auth_token = Sys.g)
use_github(protocol = "https", auth_token = Sys.getenv("GITHUB_PAT"))
devtools::document()
?performanceBLB
install.packages("png")
